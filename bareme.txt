👥 Mentoring support notes
Ce projet a pour objectif de développer la capacité de l’étudiant à décomposer une problématique afin de trouver une solution algorithmique et technique pertinente et efficace. Pour cela, le projet se focalise sur la fonctionnalité de recherche qui devra donc être la plus performante possible. 

Il est important que l’étudiant ne fonce pas tête baissée dans le code. Vous veillerez donc à ce qu’il réalise bien l’analyse de la recherche et la proposition de son algorithme avant de commencer à coder la solution. 

Étapes conseillées
Interface : Si l’étudiant veut commencer à coder, il peut commencer à réaliser l’interface de la page web.
Dans un deuxième temps, ou en parallèle, il pourra travailler sur la logique de recherche et le document d’investigation de fonctionnalité.
Ensuite il pourra commencer par implémenter la première version de son algorithme de recherche. Il sera plus naturel de commencer par implémenter la recherche simple, puis la recherche par tags. 
L’étudiant répètera la procédure pour la deuxième implémentation.
Comparaison des résultats des algorithmes via un outil de benchmark comme jsben.ch, jsbench.me, jsperf.com.
Précisions techniques
Interface
L’interface de la page web doit être intégrée avec en HTML et CSS, avec ou sans Bootstrap. Il est fortement recommandé d'utiliser Bootstrap afin de simplifier l'intégration. Cette version du site étant toujours en phase de prototype, il faudra veiller à avoir un code valide au W3C ainsi qu’une interface responsive. 

Fiche d’investigation
L’étudiant peut suivre le modèle de fiche d’investigation à la lettre, ou le modifier s’il contient toujours tous les éléments qui y sont présents. Il faut qu’il soit bien compréhensible et qu’il décompose bien la problématique de la recherche d’un point de vue Front-end, en prenant en compte le rafraîchissement de l’affichage. 

Il peut prendre la forme d’un document, de diapositives, ou autre mais devra être livré au format PDF et contenir toutes les sections présentes dans le document exemple d’investigation de fonctionnalité.

Logique de recherche
Comme expliqué dans l’énoncé, l’étudiant doit créer une branche pour chaque version de la fonction de recherche sur Git. 

Laissez bien l’étudiant imaginer les algorithmes. S’il a des difficultés à se lancer, vous pouvez lui recommander de penser à un algorithme de recherche simple qui parcourt les recettes de manière linéaire. 

Pour valider sa réflexion et choisir le meilleur moyen de filtrer les résultats, il peut s’appuyer sur des outils comme jsben.ch  (partagé comme ressource externe). 

En fonction des algorithmes qu’il aura choisis, il est possible qu’il y ait des scores de performance qui soient très éloignés l’un de l’autre. Ce que l’on souhaite ici c’est d’avoir les deux résultats et que la recommandation de l’étudiant se base sur ceux-ci pour l’implémentation de la solution finale. 

N’hésitez pas également à le sensibiliser aux différentes méthodes disponibles pour le tri de tableau. Il est recommandé dans le scénario que l'étudiant implémente une version de la fonctionnalité avec les boucles natives de JavaScript (for, while...) et une version en programmation fonctionnelle avec les méthodes de l'objet array (foreach, filter, map, reduce) afin qu'il comprenne bien la différence et les avantages. C'est seulement une recommandation.

Travaillant sur le Front-end, il est important que le moteur de recherche n’attende pas d’avoir filtré toutes les recettes pour afficher les résultats. Les items qui s’affichent dans les filtres ne doivent être que ceux présents dans les ingrédients, les ustensiles ou les appareils présents dans les premières recettes retournées. 

Recherche par tag
Les 3 champs de la recherche par tags étant basés sur le même principe, il faudra veiller à ce que l’étudiant optimise son code afin d’appliquer les principe de DRY (don’t repeat yourself). 

Pour les tags, leur ordre d’affichage n’a pas d’importance, cependant, le tag ne doit apparaître qu’une seule fois dans la liste de sélection pour chaque ingrédient / ustensile / appareil.

🕵️‍ Critères d'évaluation
🎯 Développer un algorithme pour résoudre un problème

Le document d’analyse est complet quand :

 ❒ Il contient un bref texte rappelant la problématique : une recherche à deux étapes

 ❒ Il contient un schéma expliquant la décomposition logique de la recherche

Le document d’analyse est pertinent lorsque :

 ❒ Le schéma est logique, montre bien le découpage de la recherche en deux étapes et prend en compte la problématique d’affichage des résultats. Il n’est pas nécessaire qu’il suive la convention UML.

 ❒ Le choix du moteur de recherche recommandé est justifié par une comparaison chiffrée des performances des deux versions issue d’un outil de benchmark (au moins le nombre d’opérations par seconde).

Le document d’analyse est présentable lorsque :

 ❒ Le document est livré au format PDF

🎯Décomposer un problème informatique

Le code source est complet quand :

 X Le repo Git contient 2 branches contenant les 2 versions fonctionnelles du moteur de recherche

Le code source est pertinent lorsque :

 ❒ Il y a 2 versions fonctionnelles du moteur de recherche implémentées selon les schémas et techniques indiqués par l’étudiant dans son document d’analyse

 X Aucune librairie tierce n’est utilisée pour le JavaScript

Le code source est présentable lorsque :

 X Le code est correctement indenté

 X Le code ne donne pas d’avertissement au Linter ou à la console.